[Kiama](https://bitbucket.org/inkytonik/kiama) is a Scala library for language processing including attribute grammars, term rewriting, abstract state machines and pretty printing.

This is an enhancement and bug fix release cross-published for Scala 2.10, 2.11 and 2.12. It includes major performance improvements in the Tree and Relation components of the library.

### Potentially breaking changes

 * `Relation`: `unapply` on relations has been replaced by `unapplySeq` that returns the image of the matched value as a sequence. The old usage of matching a single value and failing otherwise still works, since the pattern `rel(x)` only succeeds if the image contains exactly one value. Since the whole image is now returned it is possible to check other image structures, including the empty image `rel()` and one that contains at least one element `rel(a, rest @ _*)`.

* `Relation`: following the previous change, the `pair` extractor on relations has been modified to use `unapplySeq`. It now returns the matched value and that value's image as a tuple. Thus, a pattern such as `rel.pair(n, x, y)` succeeds if the matched value has a two-element image, binding `n` to the matched value, `x` to the first element of the image and `y` to the second element of the image.

* `Relation`: simplify API by removing rarely used relational operations (`collect`, `compose`, `containsInRange`, `index`, `preImage`, `preIndex`, `projDomain`, `projRange`, `union`, `withDomain` and `withRange`).

* `Tree`: the constructor now has an `ensureTree` argument which when true causes lazy cloning to be performed to ensure that the structure is actually a tree. `ensureTree` is false by default which changes behaviour since lazy cloning was always performed in the previous version. Thus, pass `ensureTree = true` if there is a chance that your structure is not already a tree. The `rewriteTree` operation in the `Rewriter` passes `ensureTree = true` by default since sharing is likely after rewriting.

* `Tree`: add `siblings` and `siblingCount` operations, old `siblings` relation is now called `sibling` which better matches the naming of relations such as `child`.

* `Util`: simplify `Memoiser` by making it a module instead of a trait.

### Enhancements

* `Relation`: major performance improvements primarily due to using `IdMemoiser` to provide identity-based lookup for relations and avoid using relations internally when simpler operations will do.

* `Util`: include message labels in sort order so messages after message location.

### Bug Fixes

* Handling of source file paths should now work properly on Windows (contributed by Matt Pigram).
* `Source.dropPrefix`:
** Avoid separator bug when dropping filename prefixes when there is no prefix.
** Don't drop if there is only a partial overlap.

### Other

* Source reorganised to match standard Maven/Sbt structure.
* Tidied and simplified build specs, removed Build.scala, moved to sbt 0.13.13
* Moved to Scala 2.12.1 as default version
* Moved to ScalaTest 3.0.0, ScalaCheck 1.13.4, Scallop 2.0.5.
* Fix URLs in POM that pointed to old Google Code setup
